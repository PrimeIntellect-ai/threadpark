cmake_minimum_required(VERSION 3.22.1)
project(threadpark)

set(CMAKE_CXX_STANDARD 20)

# chose threadpark backend depending on operating system
set(THREADPARK_BACKEND generic)
if (WIN32)
    message(STATUS "Using Win32 threadpark backend")
    set(THREADPARK_BACKEND win32)
elseif (APPLE)
    message(STATUS "Using Apple threadpark backend")
    set(THREADPARK_BACKEND apple)
elseif (LINUX)
    message(STATUS "Using Linux threadpark backend")
    set(THREADPARK_BACKEND linux)
elseif (UNIX)
    if (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
        message(STATUS "Using FreeBSD threadpark backend")
        set(THREADPARK_BACKEND freebsd)
    elseif (CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
        message(STATUS "Using OpenBSD threadpark backend")
        set(THREADPARK_BACKEND openbsd)
    endif ()
endif ()

if (THREADPARK_BACKEND STREQUAL "win32")
    set(THREADPARK_SOURCES win32/win32_threadpark.cpp)
elseif (THREADPARK_BACKEND STREQUAL "apple")
    set(THREADPARK_SOURCES apple/xnu_threadpark.cpp)
elseif (THREADPARK_BACKEND STREQUAL "linux")
    set(THREADPARK_SOURCES linux/linux_threadpark.cpp)
elseif (THREADPARK_BACKEND STREQUAL "freebsd")
    set(THREADPARK_SOURCES freebsd/freebsd_threadpark.cpp)
elseif (THREADPARK_BACKEND STREQUAL "openbsd")
    set(THREADPARK_SOURCES openbsd/openbsd_threadpark.cpp)
else ()
    message(FATAL_ERROR "Unknown threadpark backend: ${THREADPARK_BACKEND}")
endif ()

add_library(threadpark STATIC ${THREADPARK_SOURCES})
target_include_directories(threadpark PUBLIC include)

if(THREADPARK_BACKEND STREQUAL "win32")
    target_link_libraries(threadpark PUBLIC Synchronization.lib)
endif()

enable_testing()

option(THREAD_PARK_RUN_TESTS "Run tests" ON)
if (THREAD_PARK_RUN_TESTS)
    add_subdirectory(tests)
endif ()
