name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]

jobs:
  # Normal multi-platform build
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          # Windows MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

          # Ubuntu GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

          # Ubuntu Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

          # macOS Clang
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

        exclude:
          # Exclude invalid Windows combos
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang

          # Exclude invalid Ubuntu combos
          - os: ubuntu-latest
            c_compiler: cl

          # Exclude invalid macOS combos
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --rerun-failed --output-on-failure

  # FreeBSD build using a VM on an Ubuntu runner
  build-freebsd:
    # Use Ubuntu because we'll spin up a FreeBSD VM on top of it
    runs-on: ubuntu-latest

    steps:
      # Spin up a FreeBSD VM. Check the 'vmactions/freebsd-vm' repo for available FreeBSD versions.
      - name: Set up FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        with:
          freebsd-version: '15.0'
          # See the Action README for additional configuration options if needed

      # Check out your repository on the Ubuntu host
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install build tools inside the FreeBSD VM.
      - name: Install packages in FreeBSD VM
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 freebsd@127.0.0.1 "sudo pkg update -f"
          ssh -o StrictHostKeyChecking=no -p 22 freebsd@127.0.0.1 "sudo pkg install -y cmake ninja clang"
          # Add any additional packages your project needs, e.g., 'git', 'openssl', etc.

      # Copy code from the Ubuntu host into the FreeBSD VM
      - name: Copy project to FreeBSD VM
        run: |
          scp -o StrictHostKeyChecking=no -P 22 -r . freebsd@127.0.0.1:/home/freebsd/project

      # Configure and build inside the VM
      - name: Build in FreeBSD VM
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 freebsd@127.0.0.1 << 'EOF'
            cd ~/project
            mkdir -p build
            cmake -B build -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release .
            cmake --build build
          EOF

      # Run tests inside the VM
      - name: Test in FreeBSD VM
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 freebsd@127.0.0.1 << 'EOF'
            cd ~/project/build
            ctest --output-on-failure
          EOF
